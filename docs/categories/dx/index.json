[{"content":"概要  参考 URL  DXレポート ～ITシステム「2025年の崖」克服とDXの本格的な展開～（METI/経済産業省）    DX の考え方 データとデジタル技術を活用して、既存の製品及びサービスを変革すること。\n まだ、デジタル化されていない、又は最近デジタル化された情報は何か？  既にデータ化されている場合は、やり尽くされているかも   その情報をデータ化すると、どんなことが起きるか？  ユーザに何を提供できるか 自社にどんな価値が生まれるか    DX が目指す Society5.0 経済発展と、社会課題の解決を図る。\n 参考 URL  デジタル経営改革のための評価指標（「DX推進指標」）を取りまとめました （METI/経済産業省） Society 5.0 - 科学技術政策 - 内閣府 DX Criteriaとは - DX Criteria v201912- 「２つのDX」とデジタル経営のガイドライン    DX を支える技術  4つの DX をもって DX が初めて推進される  IT 基盤の DX 業務オペレーションの DX 顧客視点の DX 人材・文化の DX    IT 基盤の DX  クラウド技術  gradescope knewton volley atama+ qubena   カンのデジタル化  人の経験により判断が行われていることは何か それを ML でデジタル化するため、どのようなインプットデータが必要か 必要なインプットデータのうち、まだデジタル化されていない情報は何か データを収集するため、どのような仕組みが必要か   BI 導入の可能性  定常的に出力しているレポートはあるか レポートがリアルタイム参照可能になると、どのようなメリットがあるか    業務オペレーションの DX  iPaaS  システム間における統合フローの開発、実行、管理 レガシーシステム、新システムの統合を目指す   RPA  システム操作の自動化 レガシーシステムでも対応可能へ    顧客視点の DX   オムニチャネル\n 顧客の行動履歴を蓄積 店舗及び Web ページにおける蓄積データの統合    Data Management Platform 間の連携\n データの収集、統合、管理に強み プライベート DMB ( 自社 Web サイト、自社店舗、CRM ) パブリック DMP ( 連携会社 )    Marketing Automation\n チャネルの自動操作する強み 「クライアント」と「サーバ」の間に入り、パーソナライズされた情報を出し分け クライアントをセグメントに分割して、出し分け    参考 URL\n ユーザー分析DMP Juicer｜ユーザー分析やA/Bテスト、NPSが無料で    ","description":"Udemy で GoogleAppsScript に触れてみた。","id":0,"section":"posts","tags":["study","memo","udemy"],"title":"DX の導入学習","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/initial_lerning_degital_transformation/"},{"content":"概要 下記 Udemy のコースを元に学習した。\njavascript に知見がある場合、言語仕様を飛ばしつつ、短時間で GAS の仕組みを概観できる。\nプログラミング未経験者でも、言語の書き方から丁寧に説明されているため、不安なく受講できるかと考える。\nGSuite 導入企業の事務担当者に受講させると、とても効果的かも。\n 参考 URL  【業務自動化をゼロからマスター】Google Apps Scriptの仕事効率化・自動化をプログラミングで実現 | Udemy Apps Script | Google Developers Google Apps Script でよく使うスニペット集 30 選 - Qiita    Google Apps Script を使用した業務の自動化 Google Form 送信時における自動メール通知  Google Drive から、Google Form を生成 適当に入力フォームを追加 回答タブから、回答をスプレッドシートに表示 を押下 ツールタブから、スクリプトエディタを起動 ヘッダー中段の時計アイコンである現在のプロジェクトのトリガーを押下 FloatingActionButton を押下し、トリガーを生成 エディタで、フォーム送信時に発火するトリガーを元に起動する function を定義 フォームで、右上のプレビュー機能を使用して、フォームを送信 入力したメールアドレスに以下の文面が届いたら成功  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // https://developers.google.com/apps-script/reference/gmail function autoReply(event) { const [timeStamp, companyName, name, email] = event.values; const subject = `『${name}様』 お問い合わせありがとうございます`; const body = ` お名前 ${name}様 お問い合わせありがとうございます 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; GmailApp.sendEmail(email, subject, body); }   Google Form 送信時における Slack 自動通知  自分用の workspace を用意 通知したい channel を用意 Setting and Adnimistrationから、Manage App を押下して、Webページへ Incoming Webhook を探し、対象の workspace に導入すると、設定画面に移動 Webhook 用の URL をコピーしておき、下部で設定を保存する 以下の通りコードを用意  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  // https://developers.google.com/apps-script/reference/gmail  function autoReply(event) { const [timeStamp, companyName, name, email] = event.values; const subject = `『${name}様』 お問い合わせありがとうございます`; const body = ` お名前 ${name}様 お問い合わせありがとうございます 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; const slackMessage = ` お名前 ${name}様 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; GmailApp.sendEmail(email, subject, body); notifySlack(slackMessage); } function notifySlack(message) { const WEBHOOK_URL = `${slack の web ページでコピーした URL}`; const userName = \u0026#34;gasBot\u0026#34;; const payloadObj = { username: userName, text: message }; const payloadJson = JSON.stringify(payloadObj); const options = { method: \u0026#34;post\u0026#34;, contentType: \u0026#34;application/json\u0026#34;, payload: payloadJson, }; UrlFetchApp.fetch(WEBHOOK_URL, options); }   顧客リストを元に一斉メール送信 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  //https://developers.google.com/apps-script/reference/gmail/gmail-app#sendEmail(String,String,String,Object)  function sendAll() { const ss = SpreadsheetApp.getActiveSheet(); const range = ss.getDataRange().getValues(); const file = DriveApp.getFilesByName(\u0026#34;Google Driveのマイドライブに存在するファイル名\u0026#34;).next(); for(var i = 1; i \u0026lt; range.length; i++){ var title = `【${range[i][2]}様】新商品のお知らせです`; var body = ` ${range[i][1]}${range[i][2]}様 新商品のお知らせです。 `; var email = range[i][3]; var cc = range[i][4]; var options = { attachments: [file], cc: cc }; GmailApp.sendEmail(email, title, body, options); } }   ","description":"Udemy で GoogleAppsScript に触れてみた。","id":1,"section":"posts","tags":["study","memo","udemy"],"title":"GAS の導入学習","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/study-google-apps-script/"},{"content":"Hugo インストール  Install Hugo | Hugo  使いたいテーマを選択 Wordpress のテーマ選択と同じ趣旨。\n気に入ったテーマを探す。\nComplete List | Hugo Themes\n選択テーマの指示通りにプロジェクトを生成 以下のテーマを選択した。\nHugo Clarity | Hugo Themes\n ※ clarity 使用事例  Funky Cloud Medina Neon Mirrors Clarity Themeへ切り替え | らいふろぐ    GitHub Pages により公開  Host on GitHub | Hugo  ロゴ設定 新規作成 温泉マークでは味気ないため、自分用のロゴと置換する。\nShopify なら、適当な属性を選択すると、自動でサジェストしてくれるので、とても楽。\n 参考 URL  ロゴメーカー＆ロゴクリエーター - 無料のオンラインロゴジェネレーター ロゴメーカー | 【商用利用OK】無料で誰でも簡単に自分のショップのロゴが作れる    調整 Clarity の仕様上、上記で作成したロゴを使用すると、ヘッダーが画像の height 分伸びる問題が存在する。\nそのため、Mac なら画像開いた時のマークアップなどで、高さ等を調整する。\nディレクトリ設定 favicon と footer のロゴは、./static/icons/ に次の命名規則で配置すると、設定完了である。\nClarity のデフォルト設定を上書きするイメージ。\nheader のロゴは、./static/icons/ に配置するが、config.toml の設定が必要のため、後述する。\n1 2 3 4 5 6 7 8 9 10  $ tree static static ├── icons │ ├── apple-touch-icon.png │ └── favicon-32x32.png ... └── logos ... ├── logo_transparent_snip.png ...   config.toml に設定 既存のロゴと差し替える。\n1 2 3  [params] - logo = \u0026#34;logos/logo.png\u0026#34; + logo = \u0026#34;logos/logo_transparent_snip.png\u0026#34;   サイト管理者の情報を設定 config.toml で設定可能である。\n以下の key を自分用に設定すると、ある程度の見た目が整う。\n1 2 3 4 5 6 7 8  copyright = \u0026#34;\u0026#34; title = \u0026#34;\u0026#34; author = \u0026#34;\u0026#34; [params] author = \u0026#34;\u0026#34; twitter = \u0026#34;\u0026#34; introDescription = \u0026#34;\u0026#34;   config/_default/languages.toml の title にも、自分のサイト名を記述する。\n[en] title = \u0026quot;${Your Site Title}\u0026quot; LanguageName = \u0026quot;English\u0026quot; weight = 1 ","description":"Hugoインストールから、最低限の見た目を整えるところまで","id":2,"section":"posts","tags":["study","memo"],"title":"Hugo の初期設定","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/hugo-initial-settings/"},{"content":"概要 Hugo は、以下のコマンドで記事のテンプレートを記事ディレクトリに生成する。\nテンプレートファイルは、./archetypes/post.md に存在するため、好みのテンプレートを作成する。\n1  $ hugo new post/${記事名}.md    参考 URL  Archetypes | Hugo Hugoで新規記事を作成するときのTips的なメモ - Qiita    テンプレート設定 Clarity では、次の設定さえあれば充足する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +++ author = \u0026#34;${自分の名前}\u0026#34; date = \u0026#34;YYYY-mm-dd\u0026#34; title = \u0026#34;Use meta title\u0026#34; description = \u0026#34;Use meta description\u0026#34; Summary = \u0026#34;Use index page by article summary\u0026#34; featured = false tags = [ \u0026#34;\u0026#34;, ] categories = [ \u0026#34;\u0026#34;, ] +++ ## 概要  ## 〜〜   ","description":"Hugo では、記事作成時のフォーマットが存在するため、その設定を行う。","id":3,"section":"posts","tags":["study","memo"],"title":"Hugoで記事作成の環境を整える","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/hugo-settings-before-writting/"}]