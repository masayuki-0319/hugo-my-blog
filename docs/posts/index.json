[{"content":"プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、世界の最前線で使われるKPI | Udemy\nKPI の基礎知識 KPI とは ゴールにたどり着くために必要な数値目標\nシリコンバレーの格言\n測定できなければ改善することもできない。破壊的想像なんてもってのほかだ\nKPI の重要性  KPI を見ると、ビジネス等の成長度合いや問題点が一目瞭然 ユーザにプロダクトの価値を提供できているかを高い解像度で理解可能 数値で語ることにより、ステークホルダー間の認識を合わせられる 個々の施策の説明責任が一目瞭然  KPI の運用 KPI に必要な概念  数値: 10%、10billion$ 比較可能: 前年比、地域別、プロダクト別 連続性: 過去3年、直近4週間 自社で取得可能: データソースが自社内 利用目的が明快: 社内で共通認識を持ち行動の指針  良い KPI の要素  Specific: 具体的な表現 Meaturable: 数値計測が可能 Agreeable: ステークホルダー間で合意 Relevant: 目標に関連 Time-bound: 期限の区切り  現場における導入初期の対応 導入初期は、データがそろってない場合が多い。\n North Star Metric が決まり、 KSF を抽出 とりあえず判明しているデータから計測開始 「Build =\u0026gt; Measure =\u0026gt; Learn」のサイクルで回す 不適切な KPI の場合は、適宜修正  North Star Metric 詳説 North Star Metric とは プロダクトや事業の価値が、ユーザに届いているかを測定する指標\n 何に力を置き、何にトレード歩するのか、判断の軸となる 施策のインパクトおよび進捗度を組織内にも共有しやすい 明瞭な説明責任を得られる  必要な５要素  ユーザ体験とプロダクト提供価値がリンクすること ユーザがプロダクトにおける定着度となること 長期的には Up and to the right に進めること 収益に直結する Leading Indicator であること 組織内で共通認識を持てること  良い例  Uber: 月間アクティブプラットフォーム利用者数  増加するほど、ユーザが価値を感じてもらえる指標 ユーザが継続して利用することを示す指標 Uber としての成長指標 増加するほど、収益が増える指標 組織内でも明瞭な指標   Amazon: プライムユーザーの購買点数 Medium: 総読書時間 Facebook: 直近10日間で、7人以上友達を追加したユーザ数 airbnb: 予約された宿泊数  悪い例  ダウンロード数  × ユーザが価値を感じる指標とならない × プロダクトに定着しているとは言えない × 場合によるが、多くの場合は増加しても、プロダクトの成長を示していない × 場合によるが、収益に結びつくと言えない ○ 組織内では理解してもらえる   登録ユーザ数  × ユーザが価値を感じる指標とならない × プロダクトに定着しているとは言えない ○ 一応言える △ 場合による ○ 組織内では理解してもらえる    悪い例の理由  誰にでもわかる指標を安易に選択してしまった Lagging Indicator (結果指標) を選択してしまった  ユーザがどのようにプロダクトに辿り着いたか どのようにプロダクトから便益を受けているか    LinkedIn の失敗例  失敗例  LinkedIn のミッションは「世界中のプロフェッショナルが生産的かつ成功できるよう繋げていくこと」 その中で、Skill Endorsement という、自分のスキルを他人に証明してもらう機能を追加 (スキルに対するいいね機能) 証明時は、複数のスキルを証明できてしまう さらに証明してあげた相手には、通知がいく そうすると、「たくさん証明してあげるから、僕のスキルにたくさん証明して！」という動機が生まれる 最後は、スキルの証明数が意味を為さなくなった   対処例  スキルを証明した人を表示するだけでなく、特に秀でた人から証明された場合、その人を優先表示させた 自分よりも証明数が多い人のお墨付きをもらう    North Star Metric と組織 North Star Metric は、会社組織に一つのみ設定する。\nただし、子要素として、複数の LeadingIndicator を持つことは良いこと。\n配送会社のケース\n 親要素: North Star Metric  定時配達完了アイテム数   子要素  広がり: 新規ユーザ数 深さ: 注文あたりのアイテム数 頻度: ユーザあたりのアイテム数 効率: 定時配達のアイテム数    注意事項 設定時期 0-\u0026gt;1 ではなく、1-\u0026gt;100 の GrouthStage で設定する。\nProductMarketFit が見つかってからの方が効果が高い。\n見直し時期 3年後を見据えて設定するため、頻繁に変更しない。\nプロダクトのステージに合わせて変更する。\n Introduction Stage  Conversion Rate   Growth Stage  User Retention (顧客維持) Lifetime Value (顧客生涯価値) Customer Acquisition Cost (顧客獲得コスト)   Maturity Stage  Montly Recurring Revenue (月次経常収益) Annual Recurring Revenue (年間経常収益)   Decline Stage  新規サービス移行率 (新規サービスの投入)    その他見直し時期  会社の戦略変更 会社の統廃合 単純に上手く運用できていない時  まだ、PMF に至らない状況 成長しない 成長しても、ビジネスの帰結が改善しない その場合、3, 6, 12ヶ月程度毎にヘルスチェックすべき    他指標の兼ね合い NSM が増加に伴い、他の指標が下げる事例はよくあること。\nその際は、NSM が最優先指標として取り扱うこと。\nただし、影響度をモニターする必要はある。\nUser Retention 詳説 User Retention とは 現代では、競合サービス数が多い。\nそのため、ユーザ獲得のみならずユーザ定着率も非常に重要となる。\nユーザ定着率の算出方法 業界やプロダクトにより、定義が変わることに留意すること。\n簡便な算出方法であるため、厳密な方法でないことに留意すること。\n UR \u0026lt;= Daily Active User / Monthly Active User UR \u0026lt;= DayN / Daily Active User UR \u0026lt;= Day(N | Later) ユーザ数 / DAU UR \u0026lt;= Day(N to N+α) / DAU  User Retention Curve (ユーザ定着率曲線) \u0026hellip;\nRetention Life Cycle 概要 ユーザのステージ毎に分割される。\n新規から現行へ、再起から現行へ移行させるソリューションが重要となる。\n User Engagement により５つの種類に分割  新規ユーザ: プロダクト使い始め 現行ユーザ: 一定期間使用している パワーユーザ: ヘビロテする 休眠ユーザ: 一定期間後、使わなくなった 再起ユーザ: 休眠ユーザから再度使う    ステージの定義方法    タイプ 例     ユニーク X 機能を使用したユニークユーザ   総イベント数 X, Y, Z 3種類のイベントが、アカウント登録から延べ100回以上のユーザ   アクティブ% DAU における X イベントが発生したユーザ割合   平均 X 機能を Weekly で平均何回使用されたか   頻度 X 機能を Weekly で Y 回以上使用するユニークユーザ   特定プロパティの総計 X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ数   特定プロパティの割合 X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ割合    パワーユーザに注目  Heavy User  プロダクトの使用頻度が多いのみならず、現行ユーザが普段使用しない機能も使用する   Core User  プロダクトを「期待通り」に使用する   Passive User  プロダクトを頻繁に使用するが、サービス提供方法と意図しない方法で使用する 新機能発見の源泉    Behavioral Persona 概要  ペルソナとは、ユーザ群に共通する属性等の情報群をまとめた姿 Behavioral Persona は、静的情報(地域、言語)より、動的情報(プロダクトの使用方法)を元にユーザ属性を抽出したもの 明確にすると、ペルソナに対するベスト体験を考えやすくなる 1%ルール  1%のユーザが、コンテンツを作成 9%のユーザが、コンテンツに対して反応 90%のユーザが、閲覧のみ    Instagram と Twitter の事例  Instagram  最初は、ロケーションアプリだった 現行ユーザの継続率が低くて伸び悩む。。 ペルソナ分析の結果、パワーユーザは 写真のシェアとコメント を評価して使用していた Photo Sharing に特化し、他全ての機能を停止 (= 事業のピボット)   Twitter  最初は、簡易ブログプラットフォームだった 次第に、ユーザが様々なプロダクトやサービスの文句をツイートするようになる ペルソナ分析の結果、この使用方法が多かった ツイートから直接メッセージを送信可能になった    A/Bテストによる KPI 測定 具体例 AB Testing Case Studies from the world’s data driven marketeers | CRO cases\nA/Bテスト手順  Step1: 問題設定  データドリブンで理由付け ( ユーザ滞在時間数が少ない、DAUあたりアップロード数が少ない )   Step2: 仮説を立てる  ユーザ体験を損なう仮説を設定 ( トップ画像でプロダクト価値を伝えられてない？、アップロード部分が面倒？ )   Step3: ゴールを決める  どの KPI を増加させるか１つ決定 一度のテストで変更箇所を増やさない   Step4: ユーザを分割  Test Group: 新しい施策を体験するユーザ群 Control Group: 既存の状態を体験するユーザ群   Step5: テストバージョン投入  投入前にA/Aテストで、ユーザが分割しているか確認する時もあり   Step6: 他部署のA/Bテストや、ノイズが入らないよう調整  テスト期間中に避けるべきこととして、バックエンドのアップデートやマーケティングキャンペーンを実施しないこと   Step7: テストバージョンの動作確認 Step8: テスト開始  確証バイアスに注意！  新情報に対して、自分の都合の良い結果として主観的に捉えてしまう 対策  A/B テストの3要素(Why, What, How) をドキュメント化して、何を目的とするか事前に備える A/Bテストのメトリックとして、％ に拘らず、絶対数も確認する ユーザインタビューは、多様なバックグラウンドを持つ人に聞く    ","description":"","id":0,"section":"memo","tags":["study","memo","udemy"],"title":"Udemy: プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、世界の最前線で使われるKPI","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20210202-kpi-product-management/"},{"content":"プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、伝わるプロダクトアイデアの書き方 | Udemy\n基本知識 PRD とは？ プロダクト開発または機能開発を通じて、実現したいこと示す プロダクトマネージャーの考えを記したドキュメント\n   特性 PRD その他 ( 例: 仕様書 )     誰向け？ 全社的に横断 PG のみ   更新タイミング 継続アップデート 一度書いて終了   内容の深度 要点をハイレベルで記述 詳細を落とし込む   伝達したい内容 Why \u0026amp; What \u0026amp; When How to\u0026hellip;   目的 プロダクトチームの想像力を引出す チームをルールで拘束する    PM のコミュニケーション コミュニケーション通過思考を元にしたチーム構築\n   要素 実例     インスピレーション モチベが高まるようなプロダクトビジョンやチームメンバーの強み、得意なこと、ポテンシャルが十分に発揮する機会   タスク メンバーにとって適度なタスクを提供\n興味のある新ツール試行\nメンバーのリソース有効活用\n情報の透明性やサポート体制を構築   ポジション メンバーがチームに参加してもらうことによる社内への認知拡大と評判向上\n「選ばれし者」としての認識   関係性 チームの中にいて良いという感覚を提供\n話を聞いてもらえる助け合えるという心理的安全性を提供   プライベート 仕事その他個人的な出来事を共に喜んだり感謝し合えること\nメンバーの自己イメージ向上\n仕事へのオーナーシップ提供\nコンフォートゾーンの尊重     価値を下げる事例  相手の頑張りを認めない サポートしない チャレンジさせない スプリント終了近くの時に、終わらせるよう恐喝 相手の評判に傷をつける    PRD の５形態 1~4 までの形態を経て、PRD は姿を現す\n Product Vision Product Strategy Product Roadmap Product Concept Product Require Document  Product Vision  目的  プロダクトの「なぜ」に対する説明 プロダクトに関わる人に対して、同じ方向を向いてもらう 全ての意思決定は、ビジョン実現のためにする 必ずしもユーザの方向を向く必要はない   やること  以下の特性を持つ「実現したい言葉」を文字に起こす       特性 詳細     Clear 平易な言葉を使用 ( 抽象的な言葉は可能な限り回避 )   Stable Vison は、一度決めたら変更はあまりしない\n「プロダクトの先」を見据える方がブレが少なくなる   Broad プロダクトの可能性を広く捉える   Engaging Vision を聞いた人がワクワクする\nユーザが思わず使いたくなる   Short \u0026amp; Sweet 短く簡潔     実例: 楽曲レコメンデーション機能を作る！\n 悪い例: AI を活用して、他社よりも優れた、楽曲レコメンデーションを提供し、最高の顧客満足度を実現する。  AI は手段でしかない。 他社のキャッチアップに終始しかねない 顧客満足度は、良いプロダクトを作った結果でしかない 実現するとは、作り手視点でしかない   良い例: 思わず聴きたくなる曲が、使う度に現れる。  平易な言葉でブレがない AI にこだわるのではなく、新技術も見える 「使う度」という言葉に、ユーザのエンゲージメントを深めるための手段に想像力が触発される ワクワクする     Product Strategy  目的  プロダクト開発時、何をして何をしないかを決定 Vision を達成するために、現在クリアすべき仮説は何か   やること  4つの事項を明確化  ターゲットユーザーは誰か？ ユーザのペインポイントをどう解決するか？ どのようなプロダクトで、どこで差別化できるか？ ビジネス上、求められるゴールは？   最終的に3つの事項を明確化  コスト構造と収益獲得方針 競合を誰とするか？ プロダクトの拡散手段      Product Roadmap  目的  Product Strategy の表現形態 基本、ハイレベルな情報に止める CxO が投資家にプレゼンする時にしようされる プロジェクトがどのように連動しているかと、おおよそのタイムライン   やること  Product Strategy から、3つの観点でポテンシャルが存在するテーマを抽出  Delight Customer: 顧客を満足させる可能性を持つ機能 Margin Enhancement: 利益率の向上 Hard to copy by competitor: 競合に対する参入障壁      Product Concept  目的  Product Concept は、特定の機能またはプロダクト完成時のゴールを表現（文字 or パワポ） 開発前、ステークホルダーやプロダクトチームに理解して欲しいことを洗い出し   やること  次の説明ができるようにする。  エレベーターピッチ プロダクトデザイン やらないことリスト ステークホルダーを探す 解決案を描く 夜も眠れない問題 期間はどれくらいか 何を諦めるか どれだけ試算が必要か       実例: airbnb の Product Concept\n Product Pitch Deck と呼ばれ投資家向け説明だが、記述する類似点が多い なお、ある程度サービスが走ってる段階の資料であることを留意 airbnb.pdf - Google ドライブ   Product Required Document  参考フォーマット  Product Hunt - Google ドキュメント   参考URL  PRD を公開し、議論できるサービス =\u0026gt; Product Hunt – The best new products in tech.    問い・背景 ユーザが直面する問題は？  3つのスコープで、緊急性や重要性が高くないと、ユーザに価値が伝わらない  Pain: 困りごと・不便 Gain: 利得・利便 Jobs: 効率・帰結    ビジネス機会・規模は？  フェルミ推定で、概算でターゲットユーザ数を計算  市場調査の前に本当にビジネス機会があるかのあたりをつける ( Backward research method )   いずれかのフレームワークでマーケットリサーチ  PEST DEEPLIST FiveForth SWOT    自社と競合の立ち位置は？  Customer  顧客は誰か？（セグメントサイズ、成長率、マーケットシェア） 過去から現在までのトレンドは？（上昇、下降、定常） ニーズは？（各サグメントが価値を感じていること） セグメント毎に好まれる販売チャネルは？ カスタマー集中度はどのくらい？   Product  プロダクト名は？ プロダクトができることは？ プロダクトの使われ方は？ コモディティー化しているか？、どこで差別化できるか？ プロダクトライフサイクルの位置付け（新規参入者？、以前から？）   Company  会社の強みは？ コスト構造は？ ブランド力は？ 財務状況 組織体制 法規制環境   Competition  マーケット集中度は？（独占・寡占・混沌？、何社競合が存在しシェアは？） 競合はどこ？ 競合は、どのようなプロダクトを出してる？ 競合は、最近どんな一手を出した？ 競合がしていて、自社がしてないことは？ どのような販売チャネル？ 参入障壁とそのハードルの高さは？    仮説 仮説を立てる  なぜ問題が発生し、どこを解決すると、プロダクトとしてビジネスが成立するか OR ユーザの増加定着しそうか 例: ユーザは X という問題を抱えている。この仮説が正しいと仮定し、Y のプロダクトに対し、Z の機能を盛り込むことで解決する。 仮説が増えると検証が複雑になるため、一つの PRD に一つの仮説を立てる  仮説を研ぎ澄ます  仮説に対し反論し、その反論にサポートできる仮説や事実は存在しないか？  Step1: 仮説が確かであっても、Y のプロダクトに対し、Z の機能を追加してはいけない！ Step2: 仮説が不確かであっても、Y のプロダクトに対し、Z の機能を追加してはいけない！   Backward Casting  仮説が既に成功していたとしたら、何が成功要因か   Premotem  仮説が失敗するとしたら、何が原因になりそうか    仮説を検証する  A/B テスト  機能・プロダクト  What を定義する  特性で考える  価値機能群（技術要件、パフォーマンス要件、デザイン要件） ビジネスプロファイル群（ビジネス要件、プロジェクト要件）   時間×時間軸で考える  Phase1: MVP を目指して、UI/UX に不足あっても、コアとなる価値を提供する Phase2: MVP で対応不可だった事項（ PRD の場合、見通しレベル） Phase3: やろうとした機能を網羅（ PRD の場合、見通しレベル）      ビジネス要件    考慮事項 内容     目的 プロダクト又は機能のゴールは何か   提案の概要 一言で何をするプロダクト又は機能か？\nどのユーザに対し、どのような利得が生じるか？   対応スコープ 何を作り、何を作らないか？\nその境界線はどこか？   リスク 施策の遂行にあたり、何がリスクとなるか？\nそのリスクはどのように再消化できるか？   依存関係 社内・社外で依存関係となる部分はどこか？    プロジェクト要件    考慮事項 内容     スケジュール PM としてリリースしたいタイミングはいつか？   将来の対応事項 今回の施策はワンショット？、又は継続的に対応する？\n継続的な場合、どのようになぜ分割する？   テスト計画 プロダクト又は機能の Acceptance Criteria をどこに置くか   人員 プロダクトチームの所属メンバーはどこから調達するか？    技術要件  Input と Output を意識して、ユーザストーリーで考える  #{ペルソナ定義}のユーザとして、A ということがしたい、その結果 B ということを実現したい。   周辺要件（適宜必要な事項を考慮）  API を使用するか データ信頼性・依存性・一貫性 ユーザイベントログ CRM Deeplink プライバシー セキュリティー サポータビリティ（新機能をリリースする場合、運用サポート担当者の観点から使いやすいか）    パフォーマンス要件  タップやクリックに対するレスポンス速度 アクセス集中時、システムクラッシュさせるかデグレを発生させても使用可能にするか  デザイン要件  デザイン部分は、PRD を書く前にデザイナーとエンジニアと調整し、まとめておく 最低でも、ワイヤーフレーム〜LowFidelity 程度のモックを用意 ローカリゼーションの必要性 ユーザインタビューを通して、Usability がある程度クリアできているか ユーザのモチベーションを捉えているか  何をもって成功とするか  プロダクトの成功を定義  トップライン KPI がどれだけ動くか 顧客の流入する Input がどれだけ増加し、利益に繋がる Output への影響要素を増加させるか    ","description":"アイデアを現実に落とし込む設計書 PRD を作りたい","id":1,"section":"memo","tags":["udemy","product_idea"],"title":"Udemy: プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、伝わるプロダクトアイデアの書き方","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20210108-create-product-idea/"},{"content":"概要 システム障害が発生すると、感情が揺さぶられてしまい、場当たり的な調査手順で右往左往してしまいがち。\nそのため、冷静に調査を進められるよう対応手順を用意しておく。\n注意すべき姿勢として、システムは複数のシステムからなることから、漠然として感覚で対応開始すると時間を浪費する。\nそのため、調査時の行動一つ一つに対し行動理由を付して、障害対応に臨む。\n手順 基本  報告者からヒアリング  具体的にどのような操作と手順で発生したか 可能なら、発生時の画面キャプチャが欲しい   自分の手元で障害を再現  再現可能であることを確認  サービス仕様の可能性が存在する もし期待される仕様でない場合、修正の方向で報告者に打診     エラー画面の調査  エラー文で判明する可能性あり   ログの調査  アクセスログ等で再現条件の詳細が判明する可能性あり    障害発生した箇所はどこ？  Rails 等のアプリケーション？ nginx 等のミドルウェア？ 外部API 等のサードパーティ？ ブラウザ等のクライアント？  ","description":"","id":2,"section":"posts","tags":["対応手順"],"title":"システム障害の調査手順","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20210108-manual-fix-system-bug/"},{"content":"プロダクトマネジメント入門講座：作るなら最初から世界を目指せ！シリコンバレー流Product Management | Udemy\nPM の仕事とは プロダクトビジョンの作成  ProductVision とは  会社の Misson を達成したい超長期的ゴールから導出される プロダクトの長期的なゴール ( 1~2年スパン ) 例: 「次の1年で解決すべき顧客の課題は〜〜〜だから、プロダクトは〜〜〜となる必要あり」   初めに会社が考えているゴールを確認 ( CxO 役職と調整 )  PM チーム全体で ProductVision を導出 作成時期は、6ヶ月 ~ 1年スパン   各担当 PM の担当領域でゴールを決定  担当領域の中で、解決すべき問題は何か    リサーチ  リサーチとは  顧客が「良い」と思うプロダクトを作る視点を持つ なぜ、ユーザは〜〜〜という問題を抱えるのか？ プロダクトが解決しようとする問題は何か？   プロダクトが世の中に存在する時の全体像を掴む  顧客および周辺人々のネットワーク プロダクト周辺のテクノロジーやトレンド 顧客の行動や導線、感情 使用場所やタイミング   プロダクトがビジネスとして成立するか  ProductMarketFit が存在するか仮説を立てる マーケット規模、潜在ユーザ規模    プロダクトプランニング  自分の中で5つの質問に対する解を用意  ユーザが直面する問題に対して、自分の立ち位置や業界の流れは何か プロダクトを通して、たどり着きたいゴールはどこか そのために、どのような機能やプロダクトを継続リリースすることで、たどり着くのか その際に想定できるリスクは何か リスクを乗り越えていけると信じられる理由は何か    ロードマップ  ロードマップとは  新機能や新プロダクトのマーケット投入時期を示す マーケティング部門は GoToMarketプラン、営業部門は Salesプランを策定 PM は常にアップデートを続ける   会社全体として、方向性と戦略の意思統一を作り、KPI として定量的に設定 ( 3ヶ月後 ~ 1年後 ) KPI に一番効果のあるプロダクトの機能やアイデア、その前提となる仮説を洗い出し アイデアが発生させる KPI へのインパクトとリソース配分から、優先順位付け 優先順位に基づき、タイムライン毎に設定 ( 月毎、四半期毎、半年毎 ) 開発とユーザ向けテストを頻繁に回し、仮設検証しつつ、プロダクトをリリース ロードマップに更新あれば実施  PM とアジャイル開発プロセス  すべての開発は、投資でありコストである どのような開発投資を決めることをスプリントプランニング スプリントは決定した方向で、投資効果を最大化すべく全速力で動く スプリント半ばにおける機能改善要求は、多大なコストが発生する 機能改善による実現見込み利益 \u0026gt;\u0026gt; スプリント中止による損失 を見て判断  開発プロセス  プロダクトバックログ（ 主担当: PM ）  PRD に基づき、開発するプロダクトの機能一覧をハイレベルで抽出 各機能に対して、優先順位を設定 プロダクトの実装目的を記述   スプリントプランニング（ 主担当: PM・PG ）  開発機能に対する担当者を決定 開発機能に対する工数を見積もり PRD の抜け漏れを PM に確認   スプリントバックログ（ 主担当: PG ）  開発機能について、エンジニアリングタスクに分解 タスクに対する工数を見積もり タスクに対する優先順位を設定   スプリント（ 主担当: PG ）  2~4 週間単位の開発期間 毎日 or 週3回程度、チーム内で MTG 実施 ( 進捗報告、担当間のタスク依存関係を元に調整 ) バグ発生時、即座の修正 or 後回しか相談 インクリメント（ 主担当: PM ）   スプリント期間中の PM 対応  次のスプリントで対応する事項を調整 バグの対応優先順位付け   スプリントレビュー  QA を通し、リリース可能な機能を確認 開発中に発生したバグの対応時期を確認   スプリント振り返り  スプリント期間中に発生した、プロセス改善案等のフォローアップ    非開発部門との関わり  他チーム内で、機能改善要求をまとめ、リストにして優先順位を設定 他チーム代表は、PM に対して定期的に共有 PM は、既存の開発ロードマップを鑑みて優先順位を設定  要求事項は、ユーザに対して価値を提供できるか 要求事項は、他の開発を停止してでも、会社に利益をもたらすか ロードマップとは、今後の実装プロダクトや機能をリリース見通し ( 必ず実装する性質の計画でなく、あくまで変化する可能性を加味した見通し )    実行と意思決定 開発中の PM の役割  PRD の段階で、技術仕様書に落とし込み時に要件定義が甘い場合、都度、詳細の詰めを追加実施  初期の開発見積もりより、ボリュームが多いことに気付く API ドキュメント通り動かない 技術的負債(バグ)が開発スピード落とす 開発担当のエンジニアが転職等   PM の役割: タスクの優先順位付け  バグ修正の優先順位付け どのデザインパターンで進めるか 想定通り動作しない場合、ワークアラウンドオプション出しと、リスク評価および選択 実装機能の優先順位付け   PM の役割: コミュニケーション  開発メンバーが障害にぶつかってないか確認 当初予定の PRD の通り進めるか、スコープ変更した場合は影響範囲との調整 上層部への調整 ( 進捗・投資効果・メンバーのモチベーション維持 )   PM の役割: プロダクトリリース時  クリティカルなバグは全て潰す ユーザに対する UI/UX は、期待値に届いているか GoToMarket 戦略は、実行可能な状態か KPI のモニタリング準備はできているか   PM の役割: プロダクトリリース後  KPI のモニタリング ユーザからのフィードバック確認 クラッシュやバグの発生率を確認    PM の姿勢  失敗の可能性がある限り、初期段階では小さく試す 事前に失敗時の手打ちをする 失敗は隠さず、学ぶ 失敗を共有し、組織全体の「知見」に昇華  PM を生かせる組織形態とは  組織文化  PM がプロダクト開発に集中できる仕組みを整える ロードマップの変更が許容できる文化を整える 失敗をネガティブ感覚から、組織への学びの感覚を持つ   チーム構成  最小構成  PM Dev ( 兼QA ) Designer   標準構成  PM PjM DataAnalyst Dev QA Designer   最適構成  PM PjM DataAnalyst Web/Mobile Dev Backend Dev QA Designer     会社側によるチームへのサポート  自律的に動けるよう、Vision や KPI を決めたら、会社はチームに委ねる 意思決定をしやすくして、意思決定ラインを短く簡潔にする 構成単位を小さく ( 例: Amazon はピザ2枚で賄える人数程度を設定 )    ","description":"プロダクトマネジメントはなんぞや","id":3,"section":"memo","tags":["study","memo","udemy"],"title":"Udemy: プロダクトマネジメント入門講座：作るなら最初から世界を目指せ！シリコンバレー流Product Management","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20210107-initial-product-manager/"},{"content":"テーブルにレンジパーティションを貼る時、終端まで定義しないと、最後のレンジを超えた時に insert できなくてエラー発生する。\nそのため、「キャッチオール」を定義して、パーティションの終端を用意すること。\n1  PARTITION pmax VALUES LESS THAN MAXVALUE    参考URL  mysql - ERROR 1526 (HY000): Table has no partition for value 1426566990 - Stack Overflow MySQLのパーティショニング - 祈れ、そして働け ～ Ora et labora MySQL : 第15章 パーティショニング - LANDHERE MySQL :: MySQL 5.6 リファレンスマニュアル :: 19.2.1 RANGE パーティショニング pdf | 実践！パーティションの基本から実装例まで    ","description":"レンジパーティションのエラー","id":4,"section":"posts","tags":["mysql"],"title":"ERROR: Table has no partition for value from ...","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20210105-mysql-partition-memo/"},{"content":"【超実践】すぐに使えるデザイン思考！〜基本をおさえ、日常にイノベーションを起こす38個の習慣〜 | Udemy\nデザイン思考の基礎  ３つのプロセスを素早く回す  アイデア  不安な気持ちも持ちつつ、枠から飛び出す 素材を集めつつ、枠を外し、発想する   試行  即座に自分で実験してみる   フィードバック  アイデアを育てていく     サイクルを早く回す  アイデアとは アイデアに気付けるトリガー  「こんなやり方で大丈夫？、失敗するかも。。」と思ったら、枠にはまっている状況かも。 「それはちょっと。。」と思ったら、自分とは違う世界があるかもと認める？ 「どうすればいいのか。。」と思ったら、本当に問題なのか？とゼロベースに立ち返る。  アイデアを見つけるコツ  動作のバグを探す  一連の業務の中において、ムダな作業は無いか？   愛のあるクレーマーになる  困った箇所とかにイチャモンを付ける！ イチャモンとセットで、改善提案を合わせる。   五感で考える  手を動かす、喋る、見る、体感する、歩く、様々な動きから、アイデアを生み出す    A4 1枚思考法（例） デザイン思考のプロセスを身に着ける第一歩\n 左上に「日付・テーマ」に書いて、記入時間を限定して枠を埋める  時間による強制力を発揮 固定枠が存在するため、埋めようとする心理   頻度が多いタスクに対して、赤丸を付ける イライラ度が高いタスクに対して、三角を付ける 重要なタスクに対して、四角を付ける マークが重複したタスクが重要であると視覚化できる     %m/%d\nいつもの仕事 （４）する （８）する      （１）する （５）する     （２）する （６）する     （３）する （７）する      体感ヒアリング ユーザの声を鵜呑みにしない  ユーザの声は、真正面から聞いてはいけない  V = f(x) user_voice = filter(experience) ユーザによる直接の声は、本当に欲しい体験がフィルターされて隠される 医者による問診のように、真の問題を掘り下げる    ユーザに弟子入り 弟子入りの流れ  どのようにタスクをしているかをヒアリング  教えを乞う 理由を深掘り 確認する   動作のフォーカスを変えて繰り返す  弟子入りのポイント  師匠ユーザは職人気質  ユーザの話は、ハッピーパスとして要約されるため、不完全を前提 タスク中の例外は省略されるため、深掘りしてエッジケースを明らかにする   自分が理解したことを師匠ユーザに確認  相手の話を聞くとき、次の質問を考えてはいけない 自分の中で解釈で留めず、師匠ユーザに解釈を確認   弟子入りする上で気をつけること  師匠ユーザに対し専門家として、その場で改善を図らない（タスクを「ありのまま」を体験する） 現場視察として、緊張感のある雰囲気を出してはいけない（緊張感を持たせると「ありのまま」の作業にならない） リサーチャーとして、単純な質問するだけはいけない（深掘りしないならアンケートと同じ）    成功させるコツ  沈黙は、全く問題ない  無理やり質問しても意味ない 師匠ユーザにタスク工程の意味を説明してもらいながら、作業してもらう   非言語に注目  動作の矛盾に注目 動作のバグとして、そこに改善ポイントがあるかも    ヒアリング法 相手の説明に存在する文脈から、抽象的な説明をクリック！\n1 2 3 4  - { [\u0026#34;説明1\u0026#34;, \u0026#34;説明2\u0026#34;, \u0026#34;説明3\u0026#34;, \u0026#34;説明4\u0026#34;, \u0026#34;説明5\u0026#34; ] } - 深掘り！=\u0026gt; { \u0026#34;説明2\u0026#34;: [\u0026#34;説明2-1\u0026#34;,\u0026#34;説明2-2\u0026#34;,\u0026#34;説明2-3\u0026#34;,] } - 深掘り！=\u0026gt; { \u0026#34;説明2-2\u0026#34;: [\u0026#34;説明2-2-1\u0026#34;,\u0026#34;説明2-2-2\u0026#34;,\u0026#34;説明2-2-3\u0026#34;,] } - 戻り質問！　=\u0026gt; { \u0026#34;説明5\u0026#34;: [\u0026#34;説明5-1\u0026#34;,\u0026#34;説明5-2\u0026#34;,\u0026#34;説明5-3\u0026#34;,] }    望ましくないヒアリング  話を掘り下げず、用意した質問をする  =\u0026gt; すぐに質問がなくなる\u0026hellip; =\u0026gt; 一言二言で終わっちゃう\u0026hellip;   話を掘り下げず、自分の考えで決めつける  =\u0026gt; 真の問題に気づけない\u0026hellip;   話の途中なのに、断りなく切り上げて次の質問へ  =\u0026gt; 相手の心が閉じてしまい、必要な情報が引き出せない\u0026hellip;     望ましいヒアリング  質問前に知りたいことを宣言 話の途中で聞きたい事項が発生した場合、キーワードをメモ 情報がまとまってきた場合、出てきた話を噛み砕いて、相手に確認    アイデアの発想法  A4 1枚思考法を応用  機能分解  既存の商品サービ スに対して、機能分解し、求められる機能をあぶり出す   フィルタインプット  商品サービスの一つに着目し、「〇〇 × △△」、「〇〇 × ■■」として、試行錯誤   アナロジー  商品サービスを着目し、別の世界の常識を持ってきて思考 機能分解した結果、似てればなんでも良いので、試行錯誤      試作 目的  アイデアを最短、最速で良し悪しを体感する  過去は、選択肢が限られるため、内部で考え抜いて時間をかけてユーザに届く 選択肢の多い現代では、いち早くユーザに届けて良し悪しを検証の必要あり   試作は、未完成品である  アイデアを作り込みがちになり、ユーザに届けるのが遅れる また、内部のアイデアのみで時間を消費しても、完成度は大きく上がらない ある程度作ったら、人の目に晒すことにより、新たな視点や気づきが外部から得られる   早く失敗して学びを得る  量をこなすことで、質が高まる Fail Fast Learn Lot.   自らの存在定義  「〜〜な」「〜〜する」「体験 or 機会 etc..」を提供する    コンセプトを作る  誰に何を伝えたいか  問題解決するターゲットは「誰か」 「どんな利益」を提供できるか    ストーリーを作る ユーザ目線に立つため、コンセプトの実現に至るストーリーを作る。\n 何かを始める（モチベーション高い！） 途中で壁に直面する\u0026hellip; 壁を越えるための解決策を提供！ 大成功！（コンセプトや目指す状態に至る）  3つの方法  絵を作成して、イメージを起こす 質問することで言語に起こす  フィードバック 目的  多角的な視点を取り込み、次の学びへ繋げること  複数人なら、仲間を作ること 一人なら、自分のアイデア及び自信を育てること    必要な受け手  アイデアは赤子であり、育てる対象  意見を貰えそうなノリの良い人を捕まえる 早めに人を巻き込み目撃者を作る 見てもらいたいターゲットを共有して、アイデアを理解してもらう    必要な評価者  批判しない  Yes Andの姿勢で、褒めて改善点を提案   アイデアに対しフィードバック  発言者を見て評価しないよう注意   ユーザ視点でフィードバック  アイデアを最後に受け取るユーザの立場を忘れないこと    進め方  見て議論する  口頭だけでは、受け手に多大な負荷を要する A4用紙1枚だけでも用意して、認識を可能な限り合わせる    ","description":"Udemy でデザイン思考に触れた。","id":5,"section":"memo","tags":["study","memo","udemy"],"title":"Udemy:【超実践】すぐに使えるデザイン思考！〜基本をおさえ、日常にイノベーションを起こす38個の習慣〜","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20210105-initial-design-learning/"},{"content":"概要  【初心者向け】2時間でわかる！確実に商談を前進させる営業トーク50選  成果を出すための3つのポイント  Yes を急ぐより、「No を言わせない」  議題について、顧客と課題感を共有する  課題の必要性や対象者は？ 具体的にどのくらい必要？   課題感の共有後、自分の知識と掛け合わせ、ソリューションを想像   商品特性より、「判断基準を売り込む」  顧客の課題には、複数あっても大きさに差がある（課題？、予算？、モチベUP？） その課題に応じた判断基準をもって、商品を売り込む   スピーディな対応により、「顧客の熱を下げない」  連絡や対応のスピード（遅くても3日） 顧客は、方々から営業を受けるため、紹介した商品の説明も埋もれてしまう 担当者の力量も競合と比較されている    訪問前の動き  顧客に聞ける内容は聞いておく  事前の聴取がないと、複数の案がある場合、当日は一方的な話になってしまう ある程度、選択肢を絞らせることで、想定質問への深掘りもできる   社内ノウハウ  社内相談しておくことで、過去の対応実績から、新たな対応ができる可能性が高まる   訪問前に決めること  訪問の目的とゴールは明確であるか（相手の心に残したいこと） 目的とゴールに顧客にとって有益な情報があるか    課題の引き出し方  テーマの確認  冒頭に「相互に話したい議題を宣言」   課題の洗い出し  担当者と決裁者の課題を聞く（社内では？、管理者では？、あなたは？） 二人が語る課題が、大きな課題である可能性高い   課題の深掘り  課題は、「数値と人」に注目すると、見つけやすくなる 問題は誰に当てはまる？、具体的なシーンは？、どの程度の割合で当てはまる？   課題の焦点化  「重要度、緊急度」で課題を分類分けし、各課題に「絡まり」を持ち、重要性が高い課題を見つける   過去から現在までの取組、新たな課題を引き出す  顧客の成功体験と、失敗経験を踏まえて、提案する 社内資料を獲得できると、本当に刺さる提案への第一歩   取り組みへの共感と、方向性の確認  「他者を追随 or 方向性維持 or 方向転換」への次の一歩について、制約を省きどうしたいか   お土産情報を用意する  顧客にとって有益な情報 また話したいと思う営業マンへ！    失敗しない提案を作成  時期の確認  いつ頃に実現できると理想か？ 内部のマニュアル的に〇月までに合意を取る必要あるか？ 導入にあたり予算獲得時期との兼ね合いも必要のため、スケジュール共同作成等の提案   予算の確認  予算的に無理な提案をしないため、概算でも良いので把握する必要あり 直接的に聞く or 他社サービスの導入例を元に金額感を聞く   検討組織の確認  提案商品サービスによる顧客の課題解決以外にも、導入に至るまでの課題も把握する必要あり  誰が提案承認する？ 名刺交換等の顔合わせだけでも試みる 営業の場への同席を打診     競合接触の確認  顧客は、競合の何に対して魅力を感じているかに着目  どういった点が良いと感じたか 他社のサービスも引き合いに出して判断基準を探る     現在のサービス判断基準と理由の確認  顧客の選定基準に合わせたサービス紹介  直接、選定基準を聞く 曖昧なら、顧客が言語化できていない観点を一緒に探す      スムーズに提案に移行するコツ  他社の事例からサービス紹介  顧客の課題感と近い、他社の成功事例を切り口へ 違う部分もあるため、顧客に合わせてアレンジ   複数の選択肢を提示  基準を明確にして３案ほど用意 費用が安い案、効果が高い案、他社の成功事例の案    クロージング  「すぐに受注に結びつきそう！」  提案を書面化 顧客社内の検討スピードを早める   「担当者レベルでは不安\u0026hellip;」  不安要素を除外する提案 担当者が社内で導入を進めるにあたり、会議の同席や書面作成など営業マンとしてサポート   「予算がなくて\u0026hellip;」  OKラインを探る 「顧客の予算に合わせて提案したいから、予算の3パターン程教えてくれると！」 「一番安いプランから試験的に始めて、データを見てプランを考えるとか！」   「導入は急がない\u0026hellip;」  外部の動きを比較させる 社会変化へ急ぎ対応することとか、競合の動きとか スタートが早いほど、課題解決へのノウハウを蓄積できる   特別対応など社内交渉が必要な時  論点整理と締め切りを確認   相手の本気度を見極める  1: 具体的なスケジュールと予算を検討します！ 2: 決裁者に相談します 3: 関係各所から必要な情報を集めます 4: チーム内に情報共有します 5: 考えておきます    まとめ  大前提は、信頼を獲得すること ステップを作ってトライ 社外のみならず社内でも実践  ","description":"","id":6,"section":"memo","tags":["udemy"],"title":"Udemy: 【初心者向け】2時間でわかる！確実に商談を前進させる営業トーク50選","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20201226-initial-markething/"},{"content":"概要  参考 URL  現役女子アナ直伝！コミュニケーション研修    聴き方  身体の仕草  ミラーリングにより、親近感を持つ効果 相手のしぐさや行動を模倣する 多すぎると違和感   身体の向き  顔だけ向けると、相手を焦らせる 身体もむけて、相手に関心を持つことを示す   顔は笑顔で  「笑顔」は、第一印象の決め手 トレーニングとして、端を口に水平に加えることにより、笑顔をキープしやすくなる   ジェスチャー  相手に対して、手の平を向ける（敵意のなさを示す） ジェスチャーを戻す際は、戻る場所を固定（印象が良くなる）   目の動き 相手に興味を持つ姿勢  会話 会話の導入  気候、場所、服装など、気軽に答えられる質問から始める アナウンサーの技術として、短い質問をすることで、より答えやすく  何故ですか？ 何があったの？ それでどうなったの？ いつから？ どこで？ 誰が？ どうやって？    類似性の法則  相手と同じことを共有すると、仲良くなる 営業マンは、プライベートの話を使用して、相手との類似点を探る  相槌  相槌のパターンを増やす 相手の話す熱量やスピードにも合わせる  バックトラッキング  相手の言葉を復唱する 重要な要求ポイントを復唱することで、自分の理解を示す  ページング  相手の状況に応じて、合わせる相槌  相手を受け入れる肯定表現  最初から意見を否定すると、意見を潰してしまう 相手の意見を受け入れて、理由を聞く  クレーム対応  部分的な謝罪から開始する  初めの段階では、勘違いの可能性が存在する ご気分を悪くしてしまい、申し訳ございません... お手数おかけして、... ご迷惑おかけして、...   内容を確認する  お願いする形で導入 詳しくお話を聞かせて、いただけませんか？ バックトラッキングも活用   怒りを鎮める  人を変える（自分では対応が難しい場合） 時間を変える（アンガーマネジメントでは6秒過ぎれば、怒りのピークが下がる） 場所を変える（ストレスを感じる場所で話してるかも）    ","description":"","id":7,"section":"memo","tags":["udemy"],"title":"Udemy: 現役女子アナ直伝！コミュニケーション研修","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20201226-initial-communicate/"},{"content":"Hugo インストール  Install Hugo | Hugo  使いたいテーマを選択 Wordpress のテーマ選択と同じ趣旨。\n気に入ったテーマを探す。\nComplete List | Hugo Themes\n選択テーマの指示通りにプロジェクトを生成 以下のテーマを選択した。\nHugo Clarity | Hugo Themes\n ※ clarity 使用事例  Funky Cloud Medina Neon Mirrors Clarity Themeへ切り替え | らいふろぐ    GitHub Pages により公開  Host on GitHub | Hugo  ロゴ設定 新規作成 温泉マークでは味気ないため、自分用のロゴと置換する。\nShopify なら、適当な属性を選択すると、自動でサジェストしてくれるので、とても楽。\n 参考 URL  ロゴメーカー＆ロゴクリエーター - 無料のオンラインロゴジェネレーター ロゴメーカー | 【商用利用OK】無料で誰でも簡単に自分のショップのロゴが作れる    調整 Clarity の仕様上、上記で作成したロゴを使用すると、ヘッダーが画像の height 分伸びる問題が存在する。\nそのため、Mac なら画像開いた時のマークアップなどで、高さ等を調整する。\nディレクトリ設定 favicon と footer のロゴは、./static/icons/ に次の命名規則で配置すると、設定完了である。\nClarity のデフォルト設定を上書きするイメージ。\nheader のロゴは、./static/icons/ に配置するが、config.toml の設定が必要のため、後述する。\n1 2 3 4 5 6 7 8 9 10  $ tree static static ├── icons │ ├── apple-touch-icon.png │ └── favicon-32x32.png ... └── logos ... ├── logo_transparent_snip.png ...   config.toml に設定 既存のロゴと差し替える。\n1 2 3  [params] - logo = \u0026#34;logos/logo.png\u0026#34; + logo = \u0026#34;logos/logo_transparent_snip.png\u0026#34;   サイト管理者の情報を設定 config.toml で設定可能である。\n以下の key を自分用に設定すると、ある程度の見た目が整う。\n1 2 3 4 5 6 7 8  copyright = \u0026#34;\u0026#34; title = \u0026#34;\u0026#34; author = \u0026#34;\u0026#34; [params] author = \u0026#34;\u0026#34; twitter = \u0026#34;\u0026#34; introDescription = \u0026#34;\u0026#34;   config/_default/languages.toml の title にも、自分のサイト名を記述する。\n[en] title = \u0026quot;${Your Site Title}\u0026quot; LanguageName = \u0026quot;English\u0026quot; weight = 1 ","description":"Hugoインストールから、最低限の見た目を整えるところまで","id":8,"section":"posts","tags":["study","memo"],"title":"Hugo の初期設定","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201226-hugo-initial-settings/"},{"content":"概要 Hugo は、以下のコマンドで記事のテンプレートを記事ディレクトリに生成する。\nテンプレートファイルは、./archetypes/post.md に存在するため、好みのテンプレートを作成する。\n1  $ hugo new post/${記事名}.md    参考 URL  Archetypes | Hugo Hugoで新規記事を作成するときのTips的なメモ - Qiita    テンプレート設定 Clarity では、次の設定さえあれば充足する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +++ author = \u0026#34;${自分の名前}\u0026#34; date = \u0026#34;YYYY-mm-dd\u0026#34; title = \u0026#34;Use meta title\u0026#34; description = \u0026#34;Use meta description\u0026#34; Summary = \u0026#34;Use index page by article summary\u0026#34; featured = false tags = [ \u0026#34;\u0026#34;, ] categories = [ \u0026#34;\u0026#34;, ] +++ ## 概要  ## 〜〜   ","description":"Hugo では、記事作成時のフォーマットが存在するため、その設定を行う。","id":9,"section":"posts","tags":["study","memo"],"title":"Hugoで記事作成の環境を整える","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201226-hugo-settings-before-writting/"},{"content":"概要  参考 URL  今日から始めるデジタルトランスフォーメーション！テクノロジーの仕組みからデータ活用基盤のつくりかたまで | Udemy DXレポート ～ITシステム「2025年の崖」克服とDXの本格的な展開～（METI/経済産業省）    DX の考え方 データとデジタル技術を活用して、既存の製品及びサービスを変革すること。\n まだ、デジタル化されていない、又は最近デジタル化された情報は何か？  既にデータ化されている場合は、やり尽くされているかも   その情報をデータ化すると、どんなことが起きるか？  ユーザに何を提供できるか 自社にどんな価値が生まれるか    DX が目指す Society5.0 経済発展と、社会課題の解決を図る。\n 参考 URL  デジタル経営改革のための評価指標（「DX推進指標」）を取りまとめました （METI/経済産業省） Society 5.0 - 科学技術政策 - 内閣府 DX Criteriaとは - DX Criteria v201912- 「２つのDX」とデジタル経営のガイドライン    DX を支える技術  4つの DX をもって DX が初めて推進される  IT 基盤の DX 業務オペレーションの DX 顧客視点の DX 人材・文化の DX    IT 基盤の DX  クラウド技術  gradescope knewton volley atama+ qubena   カンのデジタル化  人の経験により判断が行われていることは何か それを ML でデジタル化するため、どのようなインプットデータが必要か 必要なインプットデータのうち、まだデジタル化されていない情報は何か データを収集するため、どのような仕組みが必要か   BI 導入の可能性  定常的に出力しているレポートはあるか レポートがリアルタイム参照可能になると、どのようなメリットがあるか    業務オペレーションの DX  iPaaS  システム間における統合フローの開発、実行、管理 レガシーシステム、新システムの統合を目指す   RPA  システム操作の自動化 レガシーシステムでも対応可能へ    顧客視点の DX   オムニチャネル\n 顧客の行動履歴を蓄積 店舗及び Web ページにおける蓄積データの統合    Data Management Platform 間の連携\n データの収集、統合、管理に強み プライベート DMB ( 自社 Web サイト、自社店舗、CRM ) パブリック DMP ( 連携会社 )    Marketing Automation\n チャネルの自動操作する強み 「クライアント」と「サーバ」の間に入り、パーソナライズされた情報を出し分け クライアントをセグメントに分割して、出し分け    参考 URL\n ユーザー分析DMP Juicer｜ユーザー分析やA/Bテスト、NPSが無料で    ","description":"","id":10,"section":"memo","tags":["study","memo","udemy"],"title":"Udemy: 今日から始めるデジタルトランスフォーメーション！テクノロジーの仕組みからデータ活用基盤の作り方まで","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20201226-initial_lerning_degital_transformation/"},{"content":"概要 下記 Udemy のコースを元に学習した。\njavascript に知見がある場合、言語仕様を飛ばしつつ、短時間で GAS の仕組みを概観できる。\nプログラミング未経験者でも、言語の書き方から丁寧に説明されているため、不安なく受講できるかと考える。\nGSuite 導入企業の事務担当者に受講させると、とても効果的かも。\n 参考 URL  【業務自動化をゼロからマスター】Google Apps Scriptの仕事効率化・自動化をプログラミングで実現 | Udemy Apps Script | Google Developers Google Apps Script でよく使うスニペット集 30 選 - Qiita    Google Apps Script を使用した業務の自動化 Google Form 送信時における自動メール通知  Google Drive から、Google Form を生成 適当に入力フォームを追加 回答タブから、回答をスプレッドシートに表示 を押下 ツールタブから、スクリプトエディタを起動 ヘッダー中段の時計アイコンである現在のプロジェクトのトリガーを押下 FloatingActionButton を押下し、トリガーを生成 エディタで、フォーム送信時に発火するトリガーを元に起動する function を定義 フォームで、右上のプレビュー機能を使用して、フォームを送信 入力したメールアドレスに以下の文面が届いたら成功  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // https://developers.google.com/apps-script/reference/gmail function autoReply(event) { const [timeStamp, companyName, name, email] = event.values; const subject = `『${name}様』 お問い合わせありがとうございます`; const body = ` お名前 ${name}様 お問い合わせありがとうございます 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; GmailApp.sendEmail(email, subject, body); }   Google Form 送信時における Slack 自動通知  自分用の workspace を用意 通知したい channel を用意 Setting and Adnimistrationから、Manage App を押下して、Webページへ Incoming Webhook を探し、対象の workspace に導入すると、設定画面に移動 Webhook 用の URL をコピーしておき、下部で設定を保存する 以下の通りコードを用意  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  // https://developers.google.com/apps-script/reference/gmail  function autoReply(event) { const [timeStamp, companyName, name, email] = event.values; const subject = `『${name}様』 お問い合わせありがとうございます`; const body = ` お名前 ${name}様 お問い合わせありがとうございます 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; const slackMessage = ` お名前 ${name}様 以下の内容で、お問い合わせを承りました。 会社名: ${companyName}お名前： ${name}メールアドレス: ${email}`; GmailApp.sendEmail(email, subject, body); notifySlack(slackMessage); } function notifySlack(message) { const WEBHOOK_URL = `${slack の web ページでコピーした URL}`; const userName = \u0026#34;gasBot\u0026#34;; const payloadObj = { username: userName, text: message }; const payloadJson = JSON.stringify(payloadObj); const options = { method: \u0026#34;post\u0026#34;, contentType: \u0026#34;application/json\u0026#34;, payload: payloadJson, }; UrlFetchApp.fetch(WEBHOOK_URL, options); }   顧客リストを元に一斉メール送信 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  //https://developers.google.com/apps-script/reference/gmail/gmail-app#sendEmail(String,String,String,Object)  function sendAll() { const ss = SpreadsheetApp.getActiveSheet(); const range = ss.getDataRange().getValues(); const file = DriveApp.getFilesByName(\u0026#34;Google Driveのマイドライブに存在するファイル名\u0026#34;).next(); for(var i = 1; i \u0026lt; range.length; i++){ var title = `【${range[i][2]}様】新商品のお知らせです`; var body = ` ${range[i][1]}${range[i][2]}様 新商品のお知らせです。 `; var email = range[i][3]; var cc = range[i][4]; var options = { attachments: [file], cc: cc }; GmailApp.sendEmail(email, title, body, options); } }   ","description":"Udemy で GoogleAppsScript に触れてみた。","id":11,"section":"memo","tags":["study","memo","udemy"],"title":"Udemy:【業務自動化をゼロからマスター】Google Apps Scriptの仕事効率化・自動化をプログラミングで実現","uri":"https://masayuki-0319.github.io/hugo-my-blog/memo/20201226-study-google-apps-script/"},{"content":"概要 Web サーバの初期設定 ( Ubuntu × Apache )\nインストール 1  $ sudo apt install apache2   セキュリティ対策 エラーにサーバ情報を隠蔽 エラー画面において、デフォルトでは、フッターに Apache の情報が表示される。\nそのため、最低限の対策として、当該情報を隠蔽する。\n1  $ sudo vim /etc/apache2/apache2.conf   Apache の設定ファイルの下部に以下の設定を追加する。\n1 2 3 4  # /etc/apache2/apache2.conf + ServerSignature Off + ServerTokens ProductOnly   1  $ sudo service apache2 restart    参考 URL  たった2行でできるWebサーバ防御の「心理戦」 (2/3)：セキュリティ対策の「ある視点」（1） - ＠IT    ","description":"Apache導入時における手順メモ","id":12,"section":"posts","tags":["web_server","apache"],"title":"Apacheの初期設定","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201207_apache_init/"},{"content":"概要 rsync \u0026ndash;delete をシェルスクリプトに仕込んでサーバ壊滅した。\n事象 bashCMS2 中の ./deploy コマンド実行で、サーバを吹っ飛ばした。\n原因は、コード入力中に不可視文字が入り込んだようで、 bin/conf ファイルを読み込めてなかったこと。\n./deploy 中の rsync は、bin/conf ファイルで設定された変数を元にして、実行される。\nそのため、引数が空になって、残った / が指定されてしまい、サーバを吹っ飛ばした。\n対策 今から思えば、VSCode で ./deploy を開いていた時、txt ファイルのシンタックスカラーだったので、そこで違和感を持つべきだった。\n本番稼働をするなら、仮想環境で試験実行するだろうから、気付くだろうけど。。\nrsync \u0026ndash;delete 使用時は、引数に特に気をつけるべき教訓。\n 参考 URL  ryuichiueda/bashcms2: a little CMS system written with bash    ","description":"rsync --delte でサーバを壊した時の原因","id":13,"section":"posts","tags":["rsync","linux"],"title":"rsyncでサーバ壊滅","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201207-rsync_delete/"},{"content":"概要 ドメイン初期設定と HTTPS 化 ( さくらの VPS　× Let\u0026rsquo;s Encrypt )\nサーバの IP を確認 さくらの VPS は、デフォルトでドメインが割り当てられている。\nそのため、デフォルト値を使用する。\nなお、ドメインは、以下 URL の管理画面における ホスト名 の箇所で確認できる。\nhttps://secure.sakura.ad.jp/vps-beta/servers/:id/info\nサーバのドメイン設定 1 2  $ echo ${ホスト名} | sudo tee /etc/hostname $ sudo reboot   HTTPS 化 ( Let\u0026rsquo;s Encrypt ) 設定ファイルの調整 1 2 3  $ cd /etc/apache2/sites-available/ $ sudo cp 000-default.conf ${新設定ファイル}.conf $ vim ${新設定ファイル}.conf   1 2 3 4  # ${新設定ファイル}.conf - \u0026lt;VirtualHost *:80\u0026gt; + \u0026lt;VirtualHost ${ドメイン名}:80\u0026gt;   1 2 3 4  $ cd /etc/apache2/sites-enabled $ sudo rm 000-default.conf $ sudo ln -s ../sites-available/${新設定ファイル}.conf ./ $ sudo service apache2 restart   Let\u0026rsquo;s Encrypt のインストール 1  $ sudo apt install letsencrypt python-certbot-apache   サーバ証明書を取得 1  $ sudo letsencrypt --apache      Question Answer     Enter email address 自分のメールアドレス ( 証明書更新時期に連絡あるかも？ )   Please read the Terms \u0026hellip; 規約に同意できる場合は、Agree   Would you be willing to share your email address\u0026hellip; 任意   Which names would you like to activate https for ? HTTPS 化したいドメインを選択   Please choose whether or not to redirect HTTP traffic to HTTPS 2. Redirect    終了 Let\u0026rsquo;s Encrypt におけるサーバ証明書の有効期限は、90 日間 である。\n証明書の更新時は、以下のコマンドを実行すること。\n1  sudo letsencrypt renew    参考 URL  よくある質問 (FAQ) - Let\u0026rsquo;s Encrypt - フリーな SSL/TLS 証明書    余談: 無料ドメインの取得 使用期限が 1 年未満となるが、無料ドメインの選択肢が存在する。\n 参考 URL  Freenom freenomで無料ドメインを取得する｜ふじい｜note よくある質問 - KAGOYA Internet Routing サポートサイト - DNS設定が反映したか確認したい    ","description":"さくらのVPS利用時におけるドメイン設定","id":14,"section":"posts","tags":["domain","https"],"title":"ドメインの初期設定とHTTPS化","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201207-dmain_init/"},{"content":"概要 ssh 接続時にエラー発生REMOTE HOST IDENTIFICATION HAS CHANGED!\nエラー内容  状況  サーバが吹っ飛んだため、OS再インストールした サーバ再起動後、ssh 接続を試みた 以下の通りエラーが発生    1 2 3 4  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ...以下略...   原因 SSH接続先の情報について、接続元が以下のファイルに保存している。\nそのため、OS再インストール等により接続先の情報が変わったため、不整合が生じた様子。\n保存場所: cat ~/.ssh/known_hosts\n SSHでは、安全な接続を行うために接続先サーバの情報(RSA公開鍵のフィンガープリント)を、クライアントは保存する。SSH接続時には、以前保存したこの情報と、いままさに接続しようとしているサーバの情報が一致しているかを確認する。こうすることで、ユーザ（クライアント）が知らない間に、別のサーバへ接続してしまうことを防ぐ。よりセキュアになるってわけだ。\n  参考 URL  SSH接続エラー回避方法：.ssh/known_hostsから特定のホストを削除する/削除しないで対処する3つの方法 - Qiita    対策 vim ~/.ssh/known_hosts により、以前のサーバ情報を削除した。\n","description":"サーバ再起動時におけるSSH接続の失敗メモ","id":15,"section":"posts","tags":["ssh","error"],"title":"ssh 接続時にエラー発生`REMOTE HOST IDENTIFICATION HAS CHANGED!`","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201201-ssh_error/"},{"content":"概要 Ubuntu を使用したサーバ構築の手順。\nOS セットアップ Set up users and passwords    Question Answer     Full name for the new user Onishi Masayuki   Username for your account onishi   Choose a password for the new user ${パスワード入力}   Re-enter password to verify ${パスワード再入力}    Partiton disks    Question Answer     Partitioning method Guided - use entire disk   Select disk to partition Virtual disk 1 (vda)   Write the changes to disks? Yes    Finish the installation  Continue 選択  再起動後に再接続    好みのサーバ設定 1 2 3 4 5 6  # 好みのテキストエディタ $ sudo apt install vim # 日本語設定 $ sudo apt install manpages-ja manpages-ja-dev language-pack-ja $ sudo update-locale LANG=ja_JP.UTF-8   SSH認証設定 SSHの設定手順について、他にも id_rsa が存在する人向けの手順としている。\n初めての人なら、ssh-keygen のみでも問題無し。\n1 2 3 4 5 6 7 8  # ローカル ## 新サーバ用の SSH Key を生成 $ cd ~/.ssh/ $ ssh-keygen -t rsa -b 4096 -f id_rsa_${別名用のsuffix} \u0026gt; 全部リターン ## 公開鍵を新サーバに送信 $ scp ./id_rsa_${別名用のsuffix}.pub ${ユーザ名}@${IPアドレス}:~/   1 2 3 4 5 6 7 8  # リモートサーバ ## SSH接続元に対して接続を許可する公開鍵を設置する `.ssh/authorized_keys` 設定 $ mkdir .ssh $ mv ${公開鍵} ./.ssh $ chmod 700 .ssh/ $ cat ${公開鍵} \u0026gt;\u0026gt; .ssh/authorized_keys $ chmod 600 .ssh/authorized_keys $ rm ${公開鍵}   SSH接続時の設定ファイル ここまでの設定では、SSH接続時に ssh ${ユーザ名}@${IPアドレス}:~/ -i ${秘密鍵のファイル名} と入力する必要がある。\nそのため、~/.ssh/config を設定することにより、入力を省略可能にする。\n1  $ vim .ssh/config   1 2 3 4 5 6  # ~/.ssh/config Host ${ssh コマンドで使用する任意のサーバ名} User ${接続先のユーザ名} Hostname ${接続先のIPアドレス} IdentityFile ~/.ssh/${生成した秘密鍵名}    参考URL  ssh-keygenでファイル名を指定して鍵を生成する - Qiita SSH で複数の秘密鍵を使い分けるいくつかの方法 - Ellinikonblue.com Weblog インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識 - Qiita ~/.ssh/configについて - Qiita    パスワードログインを無効化 1  $ sudo vim /etc/ssh/sshd_config   1 2 3 4  # /etc/ssh/sshd_config - #PasswordAuthentication yes + PasswordAuthentication no   1  $ sudo service ssh restart   断念したこと メモ: IP 制限 ( 対応見送り ) 固定 IP が必要になるが、家庭用回線において、基本的に別途オプションが必要である。\nnuro 光の場合は、ビジネス契約が必要になるから、設定不可だった。\n 参考 URL  さくらのVPS パケットフィルタで「許可する送信元IPアドレス」設定追加のお知らせ – さくらのVPSニュース NURO 光で固定IPアドレスを使う方法を解説！変動型との違いは？ | NURO 光    ","description":"Ubuntu導入時の手順メモ","id":16,"section":"posts","tags":["linux","ubuntu"],"title":"ubuntuの初期設定","uri":"https://masayuki-0319.github.io/hugo-my-blog/posts/20201201-ubuntu_init/"}]